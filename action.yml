name: "Build and Deploy to ECR"
description: "Builds an image from a dockerfile, and pushes it up to ECR"
inputs:
  build_config:
    description: File used during build (usually in postinstall) to install your app
    required: false
    default: ""
  deploy:
    description: "Whether to push the image to ECR after building it"
    required: false
    default: "true"
  dockerfile:
    description: Custom Dockerfile name
    required: false
    default: Dockerfile
  image_platform:
    description: Platforms to build the image to run on
    required: false
    default: ""
  ecr_uri:
    description: "The URI for the ECR repository"
    required: true
  env_file:
    default: ""
    description: File containing environment variables required for app to run and pass healthcheck
    required: false
  access_key_id:
    description: "An AWS Access Key ID"
    required: true
  secret_access_key:
    description: "An AWS Secret Access Key"
    required: true
  github_ssh_key:
    description: "An SSH Private Key with access to any private repos you need"
    required: false
    default: ""
  healthcheck:
    description: "A healthcheck path, like /healthcheck"
    required: false
    default: "/healthcheck"
  port:
    description: "The port the server listens on"
    required: false
    default: 3000

runs:
  using: "composite"
  steps:
    - run: |
        # Did we even input, bro?
        test -z "${{inputs.ecr_uri}}" && echo '::error::The ecr_uri input is blank. This probably means that your secret is blank or does not exist. Make sure you have registered ecr repository with glgroup register-github-repo' && exit 2
        test -z "${{inputs.access_key_id}}" && echo '::error::The access_key_id input is blank. This probably means that your secret is blank or does not exist.' && exit 2
        test -z "${{inputs.secret_access_key}}" && echo '::error::The secret_access_key input is blank. This probably means that your secret is blank or does not exist.' && exit 2

        BRANCH=$(echo ${{github.ref}} | cut -f3 -d'/')
        CONTAINER_IMAGE="${{inputs.ecr_uri}}/github/${{github.repository}}/${BRANCH}"
        CONTAINER_IMAGE=$(echo "$CONTAINER_IMAGE" | tr '[:upper:]' '[:lower:]')
        CONTAINER_IMAGE_SHA="${CONTAINER_IMAGE}:${{github.sha}}"
        CONTAINER_IMAGE_LATEST="${CONTAINER_IMAGE}:latest"
        AWS_REGION=$(echo "${{inputs.ecr_uri}}" | cut -f4 -d'.')
        AWS_ACCESS_KEY_ID="${{inputs.access_key_id}}" \
        AWS_SECRET_ACCESS_KEY="${{inputs.secret_access_key}}" \
          aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin ${{inputs.ecr_uri}}
        # Only include the GITHUB_SSH_KEY if it exists
        [ -n "${{inputs.github_ssh_key}}" ] && ARG_GITHUB_SSH_KEY='--build-arg "GITHUB_SSH_KEY=${{inputs.github_ssh_key}}"'

        # ensure the dockerfile exists and is readable
        if [ -n "${{ inputs.dockerfile }}" ] && [ ! -r "${{ inputs.dockerfile }}" ]; then
          echo '::error::`${{ inputs.dockerfile }} was not found. If your Dockerfile has a custom name, please specify it using the `dockerfile: Dockerfile.prod` param.'
          exit 2
        fi

        # Only include the GITHUB_SHA if it is used (supresses a warning)
        grep --quiet "GITHUB_SHA" "./${{ inputs.dockerfile }}" && ARG_GITHUB_SHA='--build-arg "GITHUB_SHA=${{github.sha}}"'
        if [ -n "${{ inputs.dockerfile }}" ] && [ "${{ inputs.dockerfile }}" != "Dockerfile" ]; then
          CUSTOM_DOCKERFILE="-f ${{ inputs.dockerfile }}"
        fi

        if [ -n "${{ inputs.image_platform }}" ]; then
          IMAGE_PLATFORM="--platform ${{ inputs.image_platform }} --load"
        fi

        if [ -n "${{ inputs.build_config }}" ]; then
          ARG_BUILD_CONFIG='--build-arg "BUILD_CONFIG=${{ inputs.build_config }}"'
        fi

        eval docker build \
          -t $CONTAINER_IMAGE_SHA \
          -t $CONTAINER_IMAGE_LATEST \
          $IMAGE_PLATFORM \
          $CUSTOM_DOCKERFILE \
          $ARG_BUILD_CONFIG \
          $ARG_GITHUB_SSH_KEY \
          $ARG_GITHUB_SHA \
          .

        if [ -n "${{ inputs.env_file }}" ]; then
          ENV_FILE="--env-file ${{ inputs.env_file }}"
        fi

        if [ -n "${{inputs.healthcheck}}" ]; then
          # Healthcheck the built container
          docker run -d \
            --net host \
            -p ${{inputs.port}}:${{inputs.port}} \
            $ENV_FILE \
            -e "HEALTHCHECK=${{inputs.healthcheck}}" \
            -e "PORT=${{inputs.port}}" \
            --name test-container $CONTAINER_IMAGE_SHA

          ATTEMPT_COUNT=0
          MAX_ATTEMPTS=5

          HEALTHCHECK="http://localhost:${{inputs.port}}${{inputs.healthcheck}}"

          until $(curl --output /dev/null --silent --head --fail --max-time 5 "${HEALTHCHECK}"); do
            if [ "$((++ATTEMPT_COUNT))" -gt "${MAX_ATTEMPTS}" ];then
              echo "::error::Container did not pass healthcheck at $HEALTHCHECK after $MAX_ATTEMPTS attempts"
              echo "::warning::If your container does not require a healthcheck (most jobs don't), then set healthcheck to a blank string."
              echo "::group::docker logs"
              docker logs test-container
              echo "::endgroup::"
              echo $(docker stop test-container) stopped.
              exit 1
            fi

            sleep 5
            echo "Tested healthcheck ${HEALTHCHECK} : Attempt ${ATTEMPT_COUNT} of ${MAX_ATTEMPTS}"
          done

          echo "Healthcheck passed!"
          echo $(docker stop test-container) stopped.
        fi

        [ "${{inputs.deploy}}" = "true" ] \
          && docker push $CONTAINER_IMAGE_SHA \
          && docker push $CONTAINER_IMAGE_LATEST
      shell: bash
